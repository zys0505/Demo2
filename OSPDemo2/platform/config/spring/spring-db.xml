<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
    <context:annotation-config/>
    <context:component-scan base-package="com.kd"></context:component-scan>

    <!-- 数据库配置 -->
    <!-- 	<context:property-placeholder file-encoding="utf-8" location="classpath:jdbc.properties"/> -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" id="propertyConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:config/jdbc.properties</value>
                <value>classpath*:config/application.properties</value>
            </list>
        </property>
    </bean>

    <!-- 数据源，默认配置此数据源，如果有多个数据源，在entry中进行配置  -->
    <bean id="rwDataSource" class="com.osp.core.datasource.DynamicDataSource">
        <property name="targetDataSources">
            <map>
                <entry key="master" value-ref="dataSource"></entry>
                <entry key="salve" value-ref="dataSource1"></entry>
            </map>
        </property>
    </bean>


    <!-- 德鲁伊相关配置 -->
    <bean id="BaseDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="initialSize" value="50"/>
        <property name="maxActive" value="1000"/>
        <property name="maxWait" value="500"/>
        <property name="poolPreparedStatements" value="false"/>
        <property name="defaultAutoCommit" value="false"/>
        <!--解决 400 ERROR DruidDataSource:861 - testWhileIdle is true, validationQuery -->
        <!-- <property name="testWhileIdle" value="false" />  -->

        <!-- 解决mysql的8小时问题 -->
        <!-- <property name="validationQuery" value="SELECT 1 "/>  -->
        <property name="timeBetweenLogStatsMillis" value="300000"/>
        <!-- 监控数据库 -->
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
                <ref bean="log-filter"/>
            </list>
        </property>
    </bean>

    <!-- 德鲁伊相关配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" parent="BaseDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!-- 德鲁伊相关配置 -->
    <bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" parent="BaseDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url1}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="3000"/>
        <property name="logSlowSql" value="true"/>
        <property name="mergeSql" value="true"/>
    </bean>
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="resultSetLogEnabled" value="false"/>
        <property name="statementExecutableSqlLogEnable" value="true"/>
    </bean>

    <!-- spring和mybatis结合配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="rwDataSource"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/kd/*/mapping/mysql/*.xml"/>
        <property name="plugins">
            <list>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <props>
                            <prop key="dialect">${osp.pagetion.db}</prop>
                        </props>
                    </property>
                </bean>
                <!-- 				<bean class="com.kd.frame.mybatis.OperationTimeHandle"> -->
                <!-- 					<property name="createTimeColumnName" value="CREATE_TIME"></property> -->
                <!-- 					<property name="modifiedTimeColumnName" value="MODIFIED_TIME"></property> -->
                <!-- 				</bean> -->
            </list>
        </property>
        <property name="configLocation" value="classpath:config/spring/mybatis-config.xml" />
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property value="com.kd.*.dao" name="basePackage"/>
        <property value="sqlSessionFactory" name="sqlSessionFactoryBeanName"/>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="txManager">
        <property name="dataSource" ref="rwDataSource"/>
    </bean>
    <!-- 事务策略  -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="save*" rollback-for="java.lang.Exception" propagation="REQUIRED"/>
            <tx:method name="add*" rollback-for="java.lang.Exception" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED" no-rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRED" no-rollback-for="java.lang.Exception"/>
            <tx:method name="update*" rollback-for="java.lang.Exception" propagation="REQUIRED"/>
            <tx:method name="insert*" rollback-for="java.lang.Exception" propagation="REQUIRED"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- aop映射 -->
    <aop:config>
        <aop:pointcut id="fooServiceOperation" expression="execution(* com.kd.*.service.*.*(..))"/>
        <aop:advisor pointcut-ref="fooServiceOperation" advice-ref="txAdvice"/>
    </aop:config>
    <tx:annotation-driven proxy-target-class="true" transaction-manager="txManager"/>


</beans>
